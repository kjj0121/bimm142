---
title: "Class13"
author: "Jae Kim"
format: pdf
---

# Import countData and colData

Begin a new R script and use the read.csv() function to read these count data and metadata files.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)

head(metadata)
```
Sanity check on correspondence of counts and metadata

```{r}
all(metadata$id == colnames(counts))
```

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```
There are `r nrow(counts)` genes in this dataset.

> Q2. How many ‘control’ cell lines do we have? 

```{r}
table(metadata$dex)

nControl<- sum(metadata$dex == "control")
```
There are `r nControl` control cell lines in this dataset.


# Toy Differential Gene Expression

First, we will take the mean of just the control variables. Before doing so, we must get all the counts. 
- Step 1. Calculate the mean of the control samples (i.e. columns in countData)
          Calculate the mean of the treated samples. 
          
(a) We need to find which columns are "control" samples. 
    - We need to look in the metadata (a.k.a colData), specifically in the $dex column

```{r}
control <- metadata[metadata[,"dex"]=="control",]
```

(b) extract all the control columns from `countData` and call it `control.counts`

```{r}
control.counts <- counts[ ,control$id]
```

(c) calculate the mean value across the rows of `control.counts` i.e. calcualte the mean count values for each gene in the control samples. 

```{r}
control.mean <- rowMeans( control.counts ) 
head(control.mean)
```

- step 2: calculate the mean of the treated side:

Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex == "treated"
head(counts[, treated.inds])
```
```{r}
treated.counts<- counts[, treated.inds]
treated.means <- rowMeans(treated.counts)
head(treated.means)
```

We now have control and treated mean count values. For ease of book-keeping I will combine these vectors into a new data.frame called `meancounts`
` 
```{r}
meancounts<- data.frame (control.mean, treated.means)
head(meancounts)
```
>Q3. How would you make the above code in either approach more robust?

Based on the code from the lab worksheet, we have done it in a more robust and easier way as a class, all above ! 

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

`geom_point()`


> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```

We used log transforms for skewed data such as this and because we really care most about relative changes in magnitude.
We must often use log2 as our transform as the math is easier to interpret than log10 or others. 
If we have no change - i.e. same values in control and treated will have a log2 value of zero. 

```{r}
log2(20/20)
```
If I have double the amount i.e. 20 compared to 10 for example, I will have a log2 fold-change of +1
```{r}
log2(20/10)
```
If I have half the amount I will have a log2 fold-change of -1. 
```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

```{r}
meancounts$log2fc<- log2(meancounts$treated.means / meancounts$control.mean)
head(meancounts)
```

The NaN is returned when you divide by zero and try to take the log. The -Inf is returned when you try to take the log of zero. It turns out that there are a lot of genes with zero expression. Let’s filter our data to remove these genes. Again inspect your result (and the intermediate steps) to see if things make sense to you

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The `arr.ind=TRUE` argument will clause `which()` to return both the row and column indices (i.e. positions) where there are TRUE values. This will tell us which rows and columns have zero counts. We are going to ignore any genes that have zero counts in any sample so we just focus on the row answer

Calling `unique()` will ensure we don't count any row twice if it has zero entries in both samples

>Q8. How many genes are upregulated at the common threshold of +2. log2FC values?

```{r}
sum(meancounts$log2fc >= 2, na.rm=TRUE)
```
```{r}
up.ind <- mycounts$log2fc > 2
sum(up.ind)
```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(meancounts$log2fc <= 2, na.rm=TRUE)
```
```{r}
down.ind <- mycounts$log2fc < (-2)
sum(down.ind)
```


>Q10. Do you trust these results? Why or why not?

No, we do not trust these results, since we do not know and have not gone over the statistics to find out whether or not the changes are statistically significant. 

Hold on, what about the statistics? Yes, these are big changes but are these changes significant?

To do this properly, we will turn to DESeq2 package. 

## DESeq2 analysis 

```{r}
library(DESeq2)
```

To use DESeq2 we need our input countData and colData in a specific format that DESeq2 wants:

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```
To run the analysis, I can now use the main DESeq2 function called `DESeq()` with `dds` as input 

```{r}
dds <- DESeq(dds)
```
To get the results out of the `dds` object we can use the `results()` function from the package. 

```{r}
res <- results(dds)
head(res)
```

Let's make a final plot of the log2 fold change versus the adjusted p value. 

```{r}
plot(res$log2FoldChange, res$padj)
```

It is the low p-values that we care about and these are lost in the skewed plot above. Let's take the log of the $padj values for our plot. 

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(+2,-2), col="red")
abline(h=-log(0.05), col= "red")

```


```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "green" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "lightblue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# cut-off lines
abline(v=c(-2,2), col="red", lty=2)
abline(h=-log(0.1), col="red", lty=2)
```

# Adding Annotation Data

We can use the AnnotationDbi package to add annotation data such as gene identifiers from different ources to our results objects.

```{r}
head(res)
```

We can translate/map between all these database id formats.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```


```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
```

Everything we want to translate (shortened with head())
```{r}
head(res)
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="ENTREZID",   # The new format we want to add
                     multiVals="first")
```

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="GENENAME",   # The new format we want to add
                     multiVals="first")
```

## Save our results to data

```{r}
write.csv(res, file="myresults.csv")
```

## Pathway analysis

We can use the KEGG database of biological pathways to get some more insight into our differentially expressed genes and the kinds of biology they are involved in.

```{r}
library(pathview)
library(gage)
library(gageData)

```

Look at the first two KEGG pathways

```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)

```


```{r}
head( res$entrez )
```

Make a new vector of fold-change values that I will use as input for `gage`. This will have the ENTREZ IDs as names

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```


```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```


```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

Now I can use the **KEGG IDs** ("hsa05310" etc.) of these pathways from gage to view our genes mapped to these pathways.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)

> Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05332")
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04940")
```

![](hsa05332.pathview.png)

![](hsa04940.pathview.png)
